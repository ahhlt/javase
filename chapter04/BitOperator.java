// 演示位运算符的使用及原理
public class BitOperator{

	public static void main(String[] args){

		// 计算机运算时，都是对补码进行运算，再将补码转为原码显示
		// 正数的三码合一
		// 负数的反码=原码的符号位不变，其它位取反
		// 负数的补码=反码+1
		
		// 1.按位与：2 & 3
		// 2的补码：00000000 00000000 00000000 00000010
		// 3的补码：00000000 00000000 00000000 00000011
		// 按位与   00000000 00000000 00000000 00000010（运算后的补码）
		// 补码转为原码显示00000000 00000000 00000000 00000010 = 2
		//  2 & 3计算机应该打印2
		System.out.println(2 & 3); //2
		// 2.按位取反：~(-2)
		// -2的原码：10000000 00000000 00000000 00000010
		// -2的反码：11111111 11111111 11111111 11111101
		// -2的补码：11111111 11111111 11111111 11111110
		// 按位取反  00000000 00000000 00000000 00000001（运算后的补码）
		// 注意：运算后的补码为正数，三码相同，因此运算后的反码=补码
		// 补码转为原码显示 00000000 00000000 00000000 00000001
		// ~(-2)计算机应该打印1
		System.out.println(~(-2)); //1
		//   按位取反：~2 正数
		// 2的补码：00000000 00000000 00000000 00000010
		// 按位取反 11111111 11111111 11111111 11111101（运算后的补码）
		// 注意：运算后的补码为负数，需要转为原码。
		// 先转为反码，反码=补码-1
		// 运算后的反码：11111111 11111111 11111111 11111100
		// 运算后的原码：10000000 00000000 00000000 00000011
		// 计算机打印结果应该=-3
		System.out.println(~2); //-3

	}
}